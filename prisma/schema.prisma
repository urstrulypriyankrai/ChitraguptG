generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// old models

model Product {
  id                Int               @id @default(autoincrement())
  name              String
  description       String?
  category          Category
  inStock           Decimal           @default(0) @db.Decimal(10, 2)
  lowStockThreshold Int               @default(10)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  variants          ProductVariant[]
  transactions      TransactionItem[]
  stockHistory      StockHistory[]
  tax               Tax               @relation(fields: [taxHsnCode], references: [hsnCode])
  taxHsnCode        String            @db.VarChar(8)
}

model ProductVariant {
  id             Int        @id @default(autoincrement())
  productId      Int
  weight         Decimal    @db.Decimal(10, 2)
  weightUnit     Unit
  price          Decimal    @db.Decimal(10, 2) // Selling price
  costPrice      Decimal?   @db.Decimal(10, 2) // Last purchase price
  inStock        Decimal    @default(0) @db.Decimal(10, 2)
  goDownLocation String     @unique
  purchases      Purchase[]

  product      Product        @relation(fields: [productId], references: [id])
  StockHistory StockHistory[]
}

// model ProductImage {
//   id        Int     @id @default(autoincrement())
//   productId Int
//   url       String // URL of the image
//   product   Product @relation(fields: [productId], references: [id])
// }

model Purchase {
  id           Int      @id @default(autoincrement())
  variantId    Int
  supplierId   Int
  quantity     Decimal  @db.Decimal(10, 2)
  unitPrice    Decimal  @db.Decimal(10, 2)
  totalPrice   Decimal  @db.Decimal(10, 2)
  purchaseDate DateTime @default(now())
  reference    String?

  variant      ProductVariant @relation(fields: [variantId], references: [id])
  supplier     Party          @relation(fields: [supplierId], references: [id])
  stockHistory StockHistory[]
}

model Party {
  id            Int       @id @default(autoincrement())
  name          String
  type          PartyType
  mobile        String    @unique
  email         String?   @unique
  street        String?
  district      String    @default("seoni")
  state         String    @default("madhya pradesh")
  zip           Int       @default(480991)
  creditBalance Decimal   @default(0) @db.Decimal(10, 2)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  gstNumber     String    @unique @db.VarChar(15)

  transactions  Transaction[]
  creditEntries CreditLedger[]
  payments      SupplierPayment[]
  stockHistory  StockHistory[]
  purchases     Purchase[]
}

model farmer {
  id            Int      @id @default(autoincrement())
  name          String
  fathersName   String
  mobile        String   @unique
  aadhar        String   @unique
  village       String
  district      String   @default("seoni")
  state         String   @default("madhya pradesh")
  zip           Int      @default(480991)
  creditBalance Decimal  @default(0) @db.Decimal(10, 2)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  transactions  Transaction[]
  creditEntries CreditLedger[]
  payments      SupplierPayment[]
  stockHistory  StockHistory[]
}

model StockHistory {
  id                     Int                 @id @default(autoincrement())
  productId              Int
  variantId              Int?
  quantity               Decimal             @db.Decimal(10, 2)
  type                   StockAdjustmentType
  reason                 String?
  purchaseId             Int?
  partyId                Int?
  date                   DateTime            @default(now())
  referenceTransactionId Int?
  farmerId               Int?

  product  Product         @relation(fields: [productId], references: [id])
  variant  ProductVariant? @relation(fields: [variantId], references: [id])
  purchase Purchase?       @relation(fields: [purchaseId], references: [id])
  party    Party?          @relation(fields: [partyId], references: [id])
  farmer   farmer?         @relation(fields: [farmerId], references: [id])
}

model Transaction {
  id                Int               @id @default(autoincrement())
  transactionNumber String?           @unique // Optional: Unique 
  type              TransactionType
  partyId           Int?
  totalAmount       Decimal           @db.Decimal(10, 2)
  paymentMethod     PaymentMethod
  status            TransactionStatus @default(COMPLETED)
  date              DateTime          @default(now())
  items             TransactionItem[]
  creditEntry       CreditLedger?
  farmerId          Int?

  party  Party?  @relation(fields: [partyId], references: [id])
  farmer farmer? @relation(fields: [farmerId], references: [id])
}

model TransactionItem {
  id            Int     @id @default(autoincrement())
  transactionId Int
  productId     Int
  quantity      Decimal @db.Decimal(10, 2)
  price         Decimal @db.Decimal(10, 2) // Price at the time of transaction
  gstRate       Decimal @db.Decimal(5, 2) // GST rate at the time of transaction
  taxAmount     Decimal @db.Decimal(10, 2)

  transaction Transaction @relation(fields: [transactionId], references: [id])
  product     Product     @relation(fields: [productId], references: [id])
}

model CreditLedger {
  id            Int        @id @default(autoincrement())
  partyId       Int?
  amount        Decimal    @db.Decimal(10, 2)
  type          LedgerType
  date          DateTime   @default(now())
  description   String?
  transactionId Int?       @unique
  farmerId      Int?

  party       Party?       @relation(fields: [partyId], references: [id])
  transaction Transaction? @relation(fields: [transactionId], references: [id])
  farmer      farmer?      @relation(fields: [farmerId], references: [id])
}

model SupplierPayment {
  id          Int      @id @default(autoincrement())
  partyId     Int?
  amount      Decimal  @db.Decimal(10, 2)
  paymentDate DateTime @default(now())
  reference   String?
  farmerId    Int?

  party  Party?  @relation(fields: [partyId], references: [id])
  farmer farmer? @relation(fields: [farmerId], references: [id])
}

model Tax {
  hsnCode  String    @id @db.VarChar(8)
  gstRate  GSTRATE
  products Product[]
}

enum GSTRATE {
  ZERO
  FIVE
  EIGHTEEN
  TWENTY_EIGHT
}

enum Category {
  FERTILIZER
  PESTICIDE
  INSECTICIDE
  EQUIPMENT
}

enum Unit {
  KG
  LITER
  PIECE
  BAG
}

enum PartyType {
  SUPPLIER
  RETAILER
}

enum TransactionType {
  SALE
  RETURN
  STOCK_ADJUSTMENT
}

enum PaymentMethod {
  CASH
  CREDIT
}

enum TransactionStatus {
  COMPLETED
  PENDING
  CANCELLED
}

enum LedgerType {
  DEBIT
  CREDIT
}

enum StockAdjustmentType {
  ADD
  REMOVE
  DAMAGED
  EXPIRED
}
