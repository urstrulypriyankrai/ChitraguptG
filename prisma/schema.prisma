// ==== CONNECTION CONFIGURATION ====
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==== START OF MODELS

model Product {
  id                  String   @id @unique @default(uuid())
  name                String   @unique
  description         String?
  // inStock             Int      @default(0)
  lowStockThreshold   Int      @default(10)
  taxHsnCode          String   @db.VarChar(8)
  productCategoryName String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  isActive            Boolean  @default(true)

  // Relations
  tax               Tax                @relation(fields: [taxHsnCode], references: [hsnCode])
  category          ProductCategory    @relation(fields: [productCategoryName], references: [name])
  variants          ProductVariant[]
  transactionItems  TransactionItem[]
  stockHistory      StockHistory[]
  productSuppliers  ProductSupplier[]
  parties           Party[]
  farmerSaleItems   FarmerSaleItem[]
  retailerSaleItems RetailerSaleItem[]
  ReturnItem        ReturnItem[]

  @@index([taxHsnCode, productCategoryName])
}

model ProductSupplier {
  productId  String
  supplierId String
  createdAt  DateTime @default(now())

  product  Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  supplier Party   @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@id([productId, supplierId])
  @@index([supplierId])
}

model ProductVariant {
  id                String   @id @unique
  bags              Int
  piecePerBag       Int
  weight            Int
  MRP               Int
  unloading         Int
  freightCharges    Int
  inStock           Int      @default(0)
  warehouseLocation String?
  productId         String
  quantityUnitName  String
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt

  // Relations
  product           Product            @relation(fields: [productId], references: [id], onDelete: Cascade)
  weightUnit        ProductUnit        @relation(fields: [quantityUnitName], references: [name])
  purchases         Purchase[]
  stockHistory      StockHistory[]
  transactionItems  TransactionItem[]
  farmerSaleItems   FarmerSaleItem[]
  retailerSaleItems RetailerSaleItem[]
  ReturnItem        ReturnItem[]

  @@index([productId])
}

model Purchase {
  id            Int      @id @default(autoincrement())
  variantId     String
  supplierId    String
  quantity      Decimal  @db.Decimal(10, 2)
  unitPrice     Decimal  @db.Decimal(10, 2)
  totalPrice    Decimal  @db.Decimal(10, 2)
  purchaseDate  DateTime @default(now())
  reference     String?
  invoiceNumber String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  variant       ProductVariant @relation(fields: [variantId], references: [id])
  supplier      Party          @relation(fields: [supplierId], references: [id])
  stockHistory  StockHistory[]
  ledgerEntries Ledger[]       @relation("PurchaseLedger")

  @@index([supplierId, variantId])
}

model Party {
  id            String    @id @default(uuid())
  name          String
  partyType     PartyType
  mobile        String    @unique
  email         String?   @unique
  fathersName   String?
  aadhar        String?   @unique
  creditBalance Int       @default(0)
  gstNumber     String?   @unique @db.VarChar(15)
  addressId     Int?      @unique
  productId     String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  address          Address?          @relation(fields: [addressId], references: [id])
  transactions     Transaction[]
  farmerSales      FarmerSale[]      @relation("FarmerSales")
  retailerSales    RetailerSale[]    @relation("RetailerSales")
  ledgerEntries    Ledger[]          @relation("PartyLedger")
  payments         Payment[]         @relation("PartyPayments")
  stockHistory     StockHistory[]
  purchases        Purchase[]
  productSuppliers ProductSupplier[]
  product          Product?          @relation(fields: [productId], references: [id])
  Return           Return[]

  @@index([mobile, aadhar])
  @@index([gstNumber])
  @@index([partyType])
}

model Address {
  id        Int      @id @default(autoincrement())
  street    String?
  village   String?
  district  String   @default("seoni")
  state     String   @default("madhya pradesh")
  zip       String   @default("480991")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  party Party?
}

model StockHistory {
  id                     Int                 @id @default(autoincrement())
  productId              String
  variantId              String?
  quantity               Decimal             @db.Decimal(10, 2)
  type                   StockAdjustmentType
  reason                 String?
  purchaseId             Int?
  partyId                String?
  date                   DateTime            @default(now())
  referenceTransactionId Int?
  referenceType          String? // e.g., "FARMER_SALE", "RETAILER_SALE", "RETURN", "PURCHASE"
  createdAt              DateTime            @default(now())

  // Relations
  product  Product         @relation(fields: [productId], references: [id])
  variant  ProductVariant? @relation(fields: [variantId], references: [id])
  purchase Purchase?       @relation(fields: [purchaseId], references: [id])
  party    Party?          @relation(fields: [partyId], references: [id])

  @@index([productId, variantId])
  @@index([partyId])
  @@index([type, date])
}

model Transaction {
  id                Int               @id @default(autoincrement())
  transactionNumber String?           @unique
  type              TransactionType
  partyId           String
  totalAmount       Decimal           @db.Decimal(10, 2)
  paymentMethod     PaymentMethod
  status            TransactionStatus @default(COMPLETED)
  date              DateTime          @default(now())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  party       Party             @relation(fields: [partyId], references: [id])
  items       TransactionItem[]
  ledgerEntry Ledger?           @relation("TransactionLedger")

  @@index([partyId, type, date])
  @@index([transactionNumber])
}

model TransactionItem {
  id            Int      @id @default(autoincrement())
  transactionId Int
  productId     String
  variantId     String
  quantity      Decimal  @db.Decimal(10, 2)
  price         Decimal  @db.Decimal(10, 2)
  gstRate       GSTRATE
  taxAmount     Decimal  @db.Decimal(10, 2)
  createdAt     DateTime @default(now())

  // Relations
  transaction Transaction    @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  product     Product        @relation(fields: [productId], references: [id])
  variant     ProductVariant @relation(fields: [variantId], references: [id])

  @@index([transactionId])
  @@index([productId, variantId])
}

// Universal Ledger for all financial transactions
model Ledger {
  id             Int        @id @default(autoincrement())
  partyId        String
  amount         Decimal    @db.Decimal(10, 2)
  type           LedgerType
  date           DateTime   @default(now())
  description    String?
  referenceId    Int? // Generic reference ID
  referenceType  String? // e.g., "TRANSACTION", "PAYMENT", "PURCHASE", "FARMER_SALE", "RETAILER_SALE"
  transactionId  Int?       @unique
  purchaseId     Int?
  farmerSaleId   Int?       @unique
  retailerSaleId Int?       @unique
  paymentId      Int?       @unique
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Relations
  party        Party         @relation("PartyLedger", fields: [partyId], references: [id])
  transaction  Transaction?  @relation("TransactionLedger", fields: [transactionId], references: [id])
  purchase     Purchase?     @relation("PurchaseLedger", fields: [purchaseId], references: [id])
  farmerSale   FarmerSale?   @relation("FarmerSaleLedger", fields: [farmerSaleId], references: [id])
  retailerSale RetailerSale? @relation("RetailerSaleLedger", fields: [retailerSaleId], references: [id])
  payment      Payment?      @relation("PaymentLedger", fields: [paymentId], references: [id])
  Return       Return[]      @relation("ReturnLedger")

  @@index([partyId, type, date])
  @@index([referenceType, referenceId])
}

// Payment model for all types of payments
model Payment {
  id            Int           @id @default(autoincrement())
  partyId       String
  amount        Decimal       @db.Decimal(10, 2)
  method        PaymentMethod
  date          DateTime      @default(now())
  description   String?
  reference     String?
  referenceId   Int? // Generic reference ID
  referenceType String? // e.g., "FARMER_SALE", "RETAILER_SALE", "PURCHASE"
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  party       Party   @relation("PartyPayments", fields: [partyId], references: [id])
  ledgerEntry Ledger? @relation("PaymentLedger")

  @@index([partyId, date])
  @@index([referenceType, referenceId])
}

// ========= FARMER SALE SPECIFIC MODEL ======
model FarmerSale {
  id         Int      @id @default(autoincrement())
  billNumber String   @unique
  billDate   DateTime @default(now())
  farmerId   String

  totalAmount   Int
  amountPaid    Int               @default(0)
  balance       Int               @default(0)
  paymentMethod PaymentMethod     @default(CASH)
  paymentStatus String            @default("PENDING") // "PAID", "PENDING", "PARTIAL"
  status        TransactionStatus @default(COMPLETED)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // Relations
  farmer      Party            @relation("FarmerSales", fields: [farmerId], references: [id])
  items       FarmerSaleItem[]
  ledgerEntry Ledger?          @relation("FarmerSaleLedger")

  @@index([farmerId, billDate])
  @@index([billNumber])
}

model FarmerSaleItem {
  id             Int      @id @default(autoincrement())
  saleId         Int
  productId      String
  variantId      String
  quantity       Decimal  @db.Decimal(10, 2)
  price          Decimal  @db.Decimal(10, 2)
  discount       Decimal  @default(0) @db.Decimal(10, 2)
  gstRate        GSTRATE
  hsnCode        String
  subtotal       Decimal  @db.Decimal(10, 2)
  discountAmount Decimal  @default(0) @db.Decimal(10, 2)
  gstAmount      Decimal  @db.Decimal(10, 2)
  total          Decimal  @db.Decimal(10, 2)
  createdAt      DateTime @default(now())

  // Relations
  sale    FarmerSale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product Product        @relation(fields: [productId], references: [id])
  variant ProductVariant @relation(fields: [variantId], references: [id])

  @@index([saleId])
  @@index([productId, variantId])
}

// =======    RETAILER SALE specific models =======
model RetailerSale {
  id            Int               @id @default(autoincrement())
  billNumber    String            @unique
  billDate      DateTime          @default(now())
  retailerId    String
  totalAmount   Decimal           @db.Decimal(10, 2)
  amountPaid    Decimal           @default(0) @db.Decimal(10, 2)
  balance       Decimal           @default(0) @db.Decimal(10, 2)
  paymentMethod PaymentMethod     @default(CASH)
  paymentStatus String            @default("PENDING") // "PAID", "PENDING", "PARTIAL"
  status        TransactionStatus @default(COMPLETED)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // Relations
  retailer    Party              @relation("RetailerSales", fields: [retailerId], references: [id])
  items       RetailerSaleItem[]
  ledgerEntry Ledger?            @relation("RetailerSaleLedger")

  @@index([retailerId, billDate])
  @@index([billNumber])
}

model RetailerSaleItem {
  id             Int      @id @default(autoincrement())
  saleId         Int
  productId      String
  variantId      String
  quantity       Decimal  @db.Decimal(10, 2)
  price          Decimal  @db.Decimal(10, 2)
  discount       Decimal  @default(0) @db.Decimal(10, 2)
  gstRate        GSTRATE
  hsnCode        String
  subtotal       Decimal  @db.Decimal(10, 2)
  discountAmount Decimal  @default(0) @db.Decimal(10, 2)
  gstAmount      Decimal  @db.Decimal(10, 2)
  total          Decimal  @db.Decimal(10, 2)
  createdAt      DateTime @default(now())

  // Relations
  sale    RetailerSale   @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product Product        @relation(fields: [productId], references: [id])
  variant ProductVariant @relation(fields: [variantId], references: [id])

  @@index([saleId])
  @@index([productId, variantId])
}

// =======RETURN SPECIFIC MODELS ============= 
model Return {
  id Int @id @default(autoincrement())

  returnNumber   String   @unique
  returnDate     DateTime @default(now())
  partyId        String
  totalAmount    Decimal  @db.Decimal(10, 2)
  amountRefunded Decimal  @default(0) @db.Decimal(10, 2)

  paymentMethod PaymentMethod     @default(CREDIT_NOTE)
  status        TransactionStatus @default(COMPLETED)

  BillNumber String? // Reference to original sale if applicable
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  party       Party        @relation(fields: [partyId], references: [id])
  items       ReturnItem[]
  ledgerEntry Ledger?      @relation("ReturnLedger", fields: [ledgerId], references: [id])
  ledgerId    Int?

  @@index([partyId, returnDate])
  @@index([returnNumber])
}

model ReturnItem {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())

  returnId  Int
  productId String
  variantId String

  quantity Decimal @db.Decimal(10, 2)
  price    Decimal @db.Decimal(10, 2)
  discount Decimal @default(0) @db.Decimal(10, 2)

  gstRate GSTRATE
  total   Decimal @db.Decimal(10, 2)

  // Relations
  return  Return         @relation(fields: [returnId], references: [id], onDelete: Cascade)
  product Product        @relation(fields: [productId], references: [id])
  variant ProductVariant @relation(fields: [variantId], references: [id])


  @@index([returnId])
  @@index([productId, variantId])
}

// =========== CONFIUGRATION MODELS FOR APP================
model Tax {
  hsnCode  String    @id @unique @db.VarChar(8)
  gstRate  GSTRATE
  products Product[]

  @@index([hsnCode])
}

model ProductCategory {
  name    String    @id @unique
  Product Product[]
}

model ProductUnit {
  name           String           @id @unique
  ProductVariant ProductVariant[]
}

enum GSTRATE {
  ZERO
  FIVE
  EIGHTEEN
  TWENTY_EIGHT
}

enum PartyType {
  SUPPLIER
  RETAILER
  FARMER
}

enum TransactionType {
  SALE
  RETURN
  STOCK_ADJUSTMENT
}

enum PaymentMethod {
  CASH
  CREDIT
  UPI
  BANK
  CREDIT_NOTE
}

enum TransactionStatus {
  COMPLETED
  PENDING
  CANCELLED
}

enum LedgerType {
  DEBIT // Party owes money (increase in credit balance)
  CREDIT // Party paid money (decrease in credit balance)
}

enum StockAdjustmentType {
  ADD
  REMOVE
  DAMAGED
  EXPIRED
}

//========== AUTH MODELS ===========

model User {
  id        String    @id @default(cuid())
  username  String    @unique
  password  String
  role      String    @default("ADMIN")
  accounts  Account[]
  sessions  Session[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
