generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// old models

model Product {
  id          String  @id @unique @default(uuid())
  name        String
  description String?

  inStock           Decimal  @default(0) @db.Decimal(10, 2)
  lowStockThreshold Int      @default(10)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  taxHsnCode          String @db.VarChar(8)
  productCategoryName String

  tax      Tax             @relation(fields: [taxHsnCode], references: [hsnCode])
  category ProductCategory @relation(fields: [productCategoryName], references: [name])

  variants        ProductVariant[]
  transactions    TransactionItem[]
  stockHistory    StockHistory[]
  ProductSupplier ProductSupplier[]
}

model ProductSupplier {
  productId  String
  supplierId Int

  product  Product @relation(fields: [productId], references: [id])
  supplier Party   @relation(fields: [supplierId], references: [id])

  @@id([productId, supplierId]) // Composite primary key
}

model ProductVariant {
  id             String @id @unique
  bags           Int
  piecePerBag    Int
  weight         Int
  MRP            Int
  unloading      Int
  freightCharges Int

  inStock           Int    @default(0)
  warehouseLocation String

  purchases       Purchase[]
  StockHistory    StockHistory[]
  TransactionItem TransactionItem[]

  productId        String
  quantityUnitName String

  // relations
  product    Product     @relation(fields: [productId], references: [id])
  weightUnit ProductUnit @relation(fields: [quantityUnitName], references: [name])
}

// model ProductImage {
//   id        Int     @id @default(autoincrement())
//   productId Int
//   url       String // URL of the image
//   product   Product @relation(fields: [productId], references: [id])
// }

model Purchase {
  id           Int      @id @default(autoincrement())
  variantId    String
  supplierId   Int
  quantity     Decimal  @db.Decimal(10, 2)
  unitPrice    Decimal  @db.Decimal(10, 2)
  totalPrice   Decimal  @db.Decimal(10, 2)
  purchaseDate DateTime @default(now())
  reference    String?

  variant      ProductVariant @relation(fields: [variantId], references: [id])
  supplier     Party          @relation(fields: [supplierId], references: [id])
  stockHistory StockHistory[]
}

model Party {
  id            Int       @id @default(autoincrement())
  name          String
  partyType     PartyType
  mobile        String    @unique
  email         String?   @unique
  // Farmer-specific fields (nullable)
  fathersName   String?
  aadhar        String?   @unique
  // Common fields
  creditBalance Decimal   @default(0) @db.Decimal(10, 2)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  gstNumber     String?   @unique @db.VarChar(15)
  address       Address?  @relation(fields: [addressId], references: [id])
  addressId     Int?      @unique

  // Relationships
  transactions    Transaction[]
  creditEntries   CreditLedger[]
  payments        SupplierPayment[]
  stockHistory    StockHistory[]
  purchases       Purchase[]
  ProductSupplier ProductSupplier[]

  @@index([mobile, aadhar])
  @@index([gstNumber])
}

model Address {
  id       Int     @id @default(autoincrement())
  street   String?
  village  String?
  district String  @default("seoni")
  state    String  @default("madhya pradesh")
  zip      String  @default("480991")

  Party Party?
  // Farmer Farmer?
}

model StockHistory {
  id                     Int                 @id @default(autoincrement())
  productId              String
  variantId              String?
  quantity               Decimal             @db.Decimal(10, 2)
  type                   StockAdjustmentType
  reason                 String?
  purchaseId             Int?
  partyId                Int?
  date                   DateTime            @default(now())
  referenceTransactionId Int?
  // farmerId               Int?

  product  Product         @relation(fields: [productId], references: [id])
  variant  ProductVariant? @relation(fields: [variantId], references: [id])
  purchase Purchase?       @relation(fields: [purchaseId], references: [id])
  party    Party?          @relation(fields: [partyId], references: [id])
  // farmer   Farmer?         @relation(fields: [farmerId], references: [id])
}

model Transaction {
  id                Int               @id @default(autoincrement())
  transactionNumber String?           @unique // Optional: Unique 
  type              TransactionType
  partyId           Int
  totalAmount       Decimal           @db.Decimal(10, 2)
  paymentMethod     PaymentMethod
  status            TransactionStatus @default(COMPLETED)
  date              DateTime          @default(now())
  items             TransactionItem[]
  creditEntry       CreditLedger?

  party Party @relation(fields: [partyId], references: [id])
}

model TransactionItem {
  id            Int     @id @default(autoincrement())
  transactionId Int
  productId     String
  quantity      Decimal @db.Decimal(10, 2)
  price         Decimal @db.Decimal(10, 2) // Price at the time of transaction
  gstRate       Decimal @db.Decimal(5, 2) // GST rate at the time of transaction
  taxAmount     Decimal @db.Decimal(10, 2)
  variantId     String

  transaction Transaction    @relation(fields: [transactionId], references: [id])
  product     Product        @relation(fields: [productId], references: [id])
  variant     ProductVariant @relation(fields: [variantId], references: [id])
}

model CreditLedger {
  id            Int        @id @default(autoincrement())
  partyId       Int
  amount        Decimal    @db.Decimal(10, 2)
  type          LedgerType
  date          DateTime   @default(now())
  description   String?
  transactionId Int?       @unique

  party Party @relation(fields: [partyId], references: [id])

  transaction Transaction? @relation(fields: [transactionId], references: [id])
}

model SupplierPayment {
  id          Int      @id @default(autoincrement())
  partyId     Int?
  amount      Decimal  @db.Decimal(10, 2)
  paymentDate DateTime @default(now())
  reference   String?
  farmerId    Int?

  party Party? @relation(fields: [partyId], references: [id])
}

model Tax {
  hsnCode  String    @id @db.VarChar(8)
  gstRate  GSTRATE
  products Product[]
}

model ProductCategory {
  name    String    @id @unique
  Product Product[]
}

model ProductUnit {
  name           String           @id @unique
  ProductVariant ProductVariant[]
}

enum GSTRATE {
  ZERO
  FIVE
  EIGHTEEN
  TWENTY_EIGHT
}

enum PartyType {
  SUPPLIER
  RETAILER
  FARMER
}

enum TransactionType {
  SALE
  RETURN
  STOCK_ADJUSTMENT
}

enum PaymentMethod {
  CASH
  CREDIT
}

enum TransactionStatus {
  COMPLETED
  PENDING
  CANCELLED
}

enum LedgerType {
  DEBIT
  CREDIT
}

enum StockAdjustmentType {
  ADD
  REMOVE
  DAMAGED
  EXPIRED
}
